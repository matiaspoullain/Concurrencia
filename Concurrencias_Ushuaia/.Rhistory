#Shiny EPH individual
rm(list = ls())
library(eph)
library(dplyr)
library(ggplot2)
library(forcats)
library(treemapify)
library(shiny)
library(shinyWidgets)
library(gghighlight)
Sys.setenv(LANG = "en")
options(encoding = 'UTF-8')
archivos <- list.files("CSVs Concurrencias/Restaurantes")
archivos
archivos <- list.files("CSVs Concurrencias/Restaurantes")
archivos
concurrencias <- data.frame()
for(i in archivos){
concu <- read.csv(paste("CSVs Concurrencias/Restaurantes/", i, sep = ""))
concurrencias <- rbind(concurrencias, concu)
}
archivos <- list.files("CSVs Concurrencias/Restaurantes", fill.names = TRUE)
archivos <- list.files("CSVs Concurrencias/Restaurantes", full.names = TRUE)
archivos
archivos <- list.files("CSVs Concurrencias/Restaurantes", full.names = TRUE)
concurrencias <- data.frame()
for(i in archivos){
concu <- read.csv(i)
concurrencias <- rbind(concurrencias, concu)
}
warnings()
archivos <- list.files("CSVs Concurrencias/Restaurantes", full.names = TRUE)
archivos
concurrencias <- data.frame()
for(i in archivos){
concu <- read.csv(i, encoding = "UTF-8")
concurrencias <- rbind(concurrencias, concu)
}
options(encoding = 'UTF-8')
archivos <- list.files("CSVs Concurrencias/Restaurantes", full.names = TRUE)
concurrencias <- data.frame()
for(i in archivos){
concu <- read.csv(i, encoding = "UTF-8")
concurrencias <- rbind(concurrencias, concu)
}
rm(list = ls())
library(eph)
library(dplyr)
library(ggplot2)
library(forcats)
library(treemapify)
library(shiny)
library(shinyWidgets)
library(gghighlight)
archivos <- list.files("CSVs Concurrencias/Restaurantes", full.names = TRUE)
concurrencias <- data.frame()
for(i in archivos){
concu <- read.csv(i, encoding = "UTF-8")
concurrencias <- rbind(concurrencias, concu)
}
#mapa
library(leaflet)
library(tmap)
library(sf)
library(tmaptools)
library(OpenStreetMap)
paleta <- c("#258039", "#CF3721", "#F5BE41", "#31A9B8")
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
df <- st_as_sf(x = concurrencias,
coords = c("longitud", "latitud"),
crs = projcrs)
box.ush <- st_bbox(df)
expansion <- 1/240
box.ush[[1]] <- box.ush[[1]] - expansion
box.ush[[2]] <- box.ush[[2]] - expansion
box.ush[[3]] <- box.ush[[3]] + expansion
box.ush[[4]] <- box.ush[[4]] + expansion
ushuaia <- read_osm(box.ush, ext = 1.1, raster = TRUE, type = "stamen-toner")
tmap_mode("plot") #"view" para que sea interactivo, "plot" para que sea estatico
#####################
#EMPIEZA EL SHINY
#####################
#Preset del ggplot:
tema_mati <- function(){
theme(panel.border = element_blank(),  panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = "darkGREY",
size = 1, linetype = "solid"),
panel.grid.major.y = element_line( size=.1, color="darkGREY", linetype = "dashed" ),
strip.background =element_rect(fill="#c9acff"))
}
#UI
ui <- fluidPage(
titlePanel("Concurrencias en locales de Ushuaia"),
sidebarLayout(
sidebarPanel(pickerInput("lugar", "Seleccionar local", choices = sort(unique(as.character(concurrencias$lugar))), options = list("live-search" = TRUE, `actions-box` = TRUE), multiple = FALSE),
awesomeCheckboxGroup("dia.semana", "Día de la semana", choices = unique(as.character(concurrencias$dia)), selected = unique(concurrencias$dia), inline = TRUE),
),
mainPanel(tabsetPanel(
tabPanel('Observaciones iniciales',
plotOutput('plot.concurrencia'),
leafletOutput("mapa"))
)
)
)
)
#Server
server <- function(input, output, session){
output$plot.concurrencia <- renderPlot({
concurrencias %>%
filter(lugar == input$lugar,
dia %in% input$dia.semana) %>%
ggplot(aes(x = hora, y = concurrencia)) +
geom_col(fill = "blue") +
xlab("Hora del día") +
ylab("Concurrencia") +
tema_mati() +
facet_grid(dia~.)
})
output$mapa <- renderLeaflet({
tmap_leaflet(tm_shape(ushuaia, bbox = box.ush) +
tm_rgb(alpha = 0.5) +
tm_shape(df[df$lugar == input$lugar,]) +
tm_dots(shape = 21, col = paleta[3], size = 0.2) +
tm_scale_bar(text.size = 0.3, color.dark = "grey", text.color = "grey", position = c("center", "top")) + #escala
tm_compass(north = 180, text.color = "grey", color.dark = "grey", position = c( "left", "top"), text.size = 0.3, cardinal.directions = "S")+ #flecha de norte y su posicion osbre el mapa
tm_grid(projection = projcrs, lines = FALSE, labels.inside.frame= TRUE, labels.size = 0.3)
)
})
}
#App
shinyApp(ui = ui, server = server)
options(encoding = 'UTF-8')
#mapa
library(leaflet)
library(tmap)
library(sf)
library(tmaptools)
library(OpenStreetMap)
paleta <- c("#258039", "#CF3721", "#F5BE41", "#31A9B8")
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
df <- st_as_sf(x = concurrencias,
coords = c("longitud", "latitud"),
crs = projcrs)
box.ush <- st_bbox(df)
expansion <- 1/240
box.ush[[1]] <- box.ush[[1]] - expansion
box.ush[[2]] <- box.ush[[2]] - expansion
box.ush[[3]] <- box.ush[[3]] + expansion
box.ush[[4]] <- box.ush[[4]] + expansion
ushuaia <- read_osm(box.ush, ext = 1.1, raster = TRUE, type = "stamen-toner")
tmap_mode("plot") #"view" para que sea interactivo, "plot" para que sea estatico
#####################
#EMPIEZA EL SHINY
#####################
#Preset del ggplot:
tema_mati <- function(){
theme(panel.border = element_blank(),  panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = "darkGREY",
size = 1, linetype = "solid"),
panel.grid.major.y = element_line( size=.1, color="darkGREY", linetype = "dashed" ),
strip.background =element_rect(fill="#c9acff"))
}
#UI
ui <- fluidPage(
titlePanel("Concurrencias en locales de Ushuaia"),
sidebarLayout(
sidebarPanel(pickerInput("lugar", "Seleccionar local", choices = sort(unique(as.character(concurrencias$lugar))), options = list("live-search" = TRUE, `actions-box` = TRUE), multiple = FALSE),
awesomeCheckboxGroup("dia.semana", "Día de la semana", choices = unique(as.character(concurrencias$dia)), selected = unique(concurrencias$dia), inline = TRUE),
),
mainPanel(tabsetPanel(
tabPanel('Observaciones iniciales',
plotOutput('plot.concurrencia'),
leafletOutput("mapa"))
)
)
)
)
#Server
server <- function(input, output, session){
output$plot.concurrencia <- renderPlot({
concurrencias %>%
filter(lugar == input$lugar,
dia %in% input$dia.semana) %>%
ggplot(aes(x = hora, y = concurrencia)) +
geom_col(fill = "blue") +
xlab("Hora del día") +
ylab("Concurrencia") +
tema_mati() +
facet_grid(dia~.)
})
output$mapa <- renderLeaflet({
tmap_leaflet(tm_shape(ushuaia, bbox = box.ush) +
tm_rgb(alpha = 0.5) +
tm_shape(df[df$lugar == input$lugar,]) +
tm_dots(shape = 21, col = paleta[3], size = 0.2) +
tm_scale_bar(text.size = 0.3, color.dark = "grey", text.color = "grey", position = c("center", "top")) + #escala
tm_compass(north = 180, text.color = "grey", color.dark = "grey", position = c( "left", "top"), text.size = 0.3, cardinal.directions = "S")+ #flecha de norte y su posicion osbre el mapa
tm_grid(projection = projcrs, lines = FALSE, labels.inside.frame= TRUE, labels.size = 0.3)
)
})
}
#App
shinyApp(ui = ui, server = server)
#Shiny EPH individual
rm(list = ls())
library(eph)
library(dplyr)
library(ggplot2)
library(forcats)
library(treemapify)
library(shiny)
library(shinyWidgets)
library(gghighlight)
#shinyWidgetsGallery()
Sys.setenv(LANG = "en")
archivos <- list.files("CSVs Concurrencias/Restaurantes", full.names = TRUE)
concurrencias <- data.frame()
for(i in archivos){
concu <- read.csv(i, encoding = "UTF-8")
concurrencias <- rbind(concurrencias, concu)
}
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
options(encoding = 'UTF-8')
#mapa
library(leaflet)
library(tmap)
library(sf)
library(tmaptools)
library(OpenStreetMap)
paleta <- c("#258039", "#CF3721", "#F5BE41", "#31A9B8")
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
df <- st_as_sf(x = concurrencias,
coords = c("longitud", "latitud"),
crs = projcrs)
box.ush <- st_bbox(df)
expansion <- 1/240
box.ush[[1]] <- box.ush[[1]] - expansion
box.ush[[2]] <- box.ush[[2]] - expansion
box.ush[[3]] <- box.ush[[3]] + expansion
box.ush[[4]] <- box.ush[[4]] + expansion
ushuaia <- read_osm(box.ush, ext = 1.1, raster = TRUE, type = "stamen-toner")
tmap_mode("plot") #"view" para que sea interactivo, "plot" para que sea estatico
#####################
#EMPIEZA EL SHINY
#####################
#Preset del ggplot:
tema_mati <- function(){
theme(panel.border = element_blank(),  panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = "darkGREY",
size = 1, linetype = "solid"),
panel.grid.major.y = element_line( size=.1, color="darkGREY", linetype = "dashed" ),
strip.background =element_rect(fill="#c9acff"))
}
#UI
ui <- fluidPage(
titlePanel("Concurrencias en locales de Ushuaia"),
sidebarLayout(
sidebarPanel(pickerInput("lugar", "Seleccionar local", choices = sort(unique(as.character(concurrencias$lugar))), options = list("live-search" = TRUE, `actions-box` = TRUE), multiple = FALSE),
awesomeCheckboxGroup("dia.semana", "Día de la semana", choices = unique(as.character(concurrencias$dia)), selected = unique(concurrencias$dia), inline = TRUE),
),
mainPanel(tabsetPanel(
tabPanel('Observaciones iniciales',
plotOutput('plot.concurrencia'),
leafletOutput("mapa"))
)
)
)
)
#Server
server <- function(input, output, session){
output$plot.concurrencia <- renderPlot({
concurrencias %>%
filter(lugar == input$lugar,
dia %in% input$dia.semana) %>%
ggplot(aes(x = hora, y = concurrencia)) +
geom_col(fill = "blue") +
xlab("Hora del día") +
ylab("Concurrencia") +
tema_mati() +
facet_grid(dia~.)
})
output$mapa <- renderLeaflet({
tmap_leaflet(tm_shape(ushuaia, bbox = box.ush) +
tm_rgb(alpha = 0.5) +
tm_shape(df[df$lugar == input$lugar,]) +
tm_dots(shape = 21, col = paleta[3], size = 0.2) +
tm_scale_bar(text.size = 0.3, color.dark = "grey", text.color = "grey", position = c("center", "top")) + #escala
tm_compass(north = 180, text.color = "grey", color.dark = "grey", position = c( "left", "top"), text.size = 0.3, cardinal.directions = "S")+ #flecha de norte y su posicion osbre el mapa
tm_grid(projection = projcrs, lines = FALSE, labels.inside.frame= TRUE, labels.size = 0.3)
)
})
}
#App
shinyApp(ui = ui, server = server)
#Shiny EPH individual
rm(list = ls())
library(eph)
library(dplyr)
library(ggplot2)
library(forcats)
library(treemapify)
library(shiny)
library(shinyWidgets)
library(gghighlight)
#shinyWidgetsGallery()
Sys.setenv(LANG = "en")
archivos <- list.files("CSVs Concurrencias/Restaurantes", full.names = TRUE)
concurrencias <- data.frame()
for(i in archivos){
concu <- read.csv(i, encoding = "UTF-8")
concurrencias <- rbind(concurrencias, concu)
}
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
options(encoding = 'UTF-8')
#mapa
library(leaflet)
library(tmap)
library(sf)
library(tmaptools)
library(OpenStreetMap)
paleta <- c("#258039", "#CF3721", "#F5BE41", "#31A9B8")
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
df <- st_as_sf(x = concurrencias,
coords = c("longitud", "latitud"),
crs = projcrs)
box.ush <- st_bbox(df)
expansion <- 1/240
box.ush[[1]] <- box.ush[[1]] - expansion
box.ush[[2]] <- box.ush[[2]] - expansion
box.ush[[3]] <- box.ush[[3]] + expansion
box.ush[[4]] <- box.ush[[4]] + expansion
ushuaia <- read_osm(box.ush, ext = 1.1, raster = TRUE, type = "stamen-toner")
tmap_mode("plot") #"view" para que sea interactivo, "plot" para que sea estatico
#####################
#EMPIEZA EL SHINY
#####################
#Preset del ggplot:
tema_mati <- function(){
theme(panel.border = element_blank(),  panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = "darkGREY",
size = 1, linetype = "solid"),
panel.grid.major.y = element_line( size=.1, color="darkGREY", linetype = "dashed" ),
strip.background =element_rect(fill="#c9acff"))
}
#UI
ui <- fluidPage(
titlePanel("Concurrencias en locales de Ushuaia"),
sidebarLayout(
sidebarPanel(pickerInput("lugar", "Seleccionar local", choices = sort(unique(as.character(concurrencias$lugar))), options = list("live-search" = TRUE, `actions-box` = TRUE), multiple = FALSE),
awesomeCheckboxGroup("dia.semana", "Día de la semana", choices = unique(as.character(concurrencias$dia)), selected = unique(concurrencias$dia), inline = TRUE),
),
mainPanel(tabsetPanel(
tabPanel('Observaciones iniciales',
plotOutput('plot.concurrencia'),
leafletOutput("mapa"))
)
)
)
)
#Server
server <- function(input, output, session){
output$plot.concurrencia <- renderPlot({
concurrencias %>%
filter(lugar == input$lugar,
dia %in% input$dia.semana) %>%
ggplot(aes(x = hora, y = concurrencia)) +
geom_col(fill = "blue") +
xlab("Hora del día") +
ylab("Concurrencia") +
tema_mati() +
facet_grid(dia~.)
})
output$mapa <- renderLeaflet({
tmap_leaflet(tm_shape(ushuaia, bbox = box.ush) +
tm_rgb(alpha = 0.5) +
tm_shape(df[df$lugar == input$lugar,]) +
tm_dots(shape = 21, col = paleta[3], size = 0.2) +
tm_scale_bar(text.size = 0.3, color.dark = "grey", text.color = "grey", position = c("center", "top")) + #escala
tm_compass(north = 180, text.color = "grey", color.dark = "grey", position = c( "left", "top"), text.size = 0.3, cardinal.directions = "S")+ #flecha de norte y su posicion osbre el mapa
tm_grid(projection = projcrs, lines = FALSE, labels.inside.frame= TRUE, labels.size = 0.3)
)
})
}
#App
shinyApp(ui = ui, server = server)
Sys.setenv(LANG = "en")
options(encoding = 'UTF-8')
archivos <- list.files("CSVs Concurrencias/Restaurantes", full.names = TRUE)
concurrencias <- data.frame()
for(i in archivos){
concu <- read.csv(i, encoding = "UTF-8")
concurrencias <- rbind(concurrencias, concu)
}
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
archivos <- list.files("CSVs Concurrencias/Restaurantes", full.names = TRUE)
concurrencias <- data.frame()
for(i in archivos){
concu <- read.csv(i, encoding = "UTF-8")
concurrencias <- rbind(concurrencias, concu)
}
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
write.csv(concurrencias, row.names = FALSE)
write.csv(concurrencias, file = "Concurrencias", row.names = FALSE)
