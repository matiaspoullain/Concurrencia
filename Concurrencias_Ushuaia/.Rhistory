geom_col(position = "dodge") +
xlab("Hora del día") +
ylab("Concurrencia") +
tema_mati() +
facet_grid(dia~.)
})
output$mapa <- renderLeaflet({
tmap_leaflet(tm_shape(ushuaia, bbox = box.ush) +
tm_rgb(alpha = 0.5) +
tm_shape(df[df$lugar %in% input$lugar,]) +
tm_dots(shape = 21, col = paleta[3], size = 0.2) +
tm_text("lugar.abr", ymod = -0.6, size = 0.4, just = "center")
)
})
}
#App
shinyApp(ui = ui, server = server)
#Shiny EPH individual
rm(list = ls())
library(eph)
library(dplyr)
library(ggplot2)
library(shiny)
library(shinyWidgets)
library(rgdal)
#shinyWidgetsGallery()
Sys.setenv(LANG = "en")
options(encoding = 'UTF-8')
concurrencias <- read.csv("Concurrencias.csv")
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
concurrencias$lugar.abr <- paste(substr(concurrencias$lugar, 1, 10), "...", sep = "")
concurrencias$lugar.abr <- factor(concurrencias$lugar.abr, levels = sort(unique(concurrencias$lugar.abr)))
#mapa
library(leaflet)
library(tmap)
library(sf)
library(tmaptools)
library(OpenStreetMap)
paleta <- c("#258039", "#CF3721", "#F5BE41", "#31A9B8")
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
df <- st_as_sf(x = concurrencias,
coords = c("longitud", "latitud"),
crs = projcrs)
box.ush <- st_bbox(df)
expansion <- 1/240
box.ush[[1]] <- box.ush[[1]] - expansion
box.ush[[2]] <- box.ush[[2]] - expansion
box.ush[[3]] <- box.ush[[3]] + expansion
box.ush[[4]] <- box.ush[[4]] + expansion
ushuaia <- read_osm(box.ush, ext = 1.1, raster = TRUE, type = "stamen-toner")
tmap_mode("plot") #"view" para que sea interactivo, "plot" para que sea estatico
#####################
#EMPIEZA EL SHINY
#####################
#Preset del ggplot:
tema_mati <- function(){
theme(panel.border = element_blank(),  panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = "darkGREY",
size = 1, linetype = "solid"),
panel.grid.major.y = element_line( size=.1, color="darkGREY", linetype = "dashed" ),
strip.background =element_rect(fill="#c9acff"))
}
#UI
ui <- fluidPage(
titlePanel("Concurrencias en locales de Ushuaia"),
sidebarLayout(
sidebarPanel(pickerInput("lugar", "Seleccionar local", choices = sort(unique(as.character(concurrencias$lugar))), options = list("live-search" = TRUE, `actions-box` = TRUE), multiple = TRUE),
awesomeCheckboxGroup("dia.semana", "Día de la semana", choices = unique(as.character(concurrencias$dia)), selected = unique(concurrencias$dia), inline = TRUE),
),
mainPanel(tabsetPanel(
tabPanel('Observaciones iniciales',
plotOutput('plot.concurrencia'),
leafletOutput("mapa"))
)
)
)
)
#Server
server <- function(input, output, session){
output$plot.concurrencia <- renderPlot({
concurrencias %>%
filter(lugar %in% input$lugar,
dia %in% input$dia.semana) %>%
ggplot(aes(x = hora, y = concurrencia, fill = lugar.abr)) +
geom_col(position = "dodge") +
xlab("Hora del día") +
ylab("Concurrencia") +
tema_mati() +
facet_grid(dia~.)
})
output$mapa <- renderLeaflet({
tmap_leaflet(tm_shape(ushuaia, bbox = box.ush) +
tm_rgb(alpha = 0.5) +
tm_shape(df[df$lugar %in% input$lugar,]) +
tm_dots(shape = 21, col = paleta[3], size = 0.2) +
tm_text("lugar.abr", ymod = -0.6, size = 1, just = "center")
)
})
}
#App
shinyApp(ui = ui, server = server)
install.packages("rgdal")
shiny::runApp()
runApp()
runApp()
devtools::install_github('Mikata-Project/ggthemr')
devtools::install_github('Mikata-Project/ggthemr')
install.packages("rlang")
devtools::install_github('Mikata-Project/ggthemr')
install.packages("glue")
devtools::install_github('Mikata-Project/ggthemr')
install.packages("digest")
devtools::install_github('Mikata-Project/ggthemr')
install.packages("fansi")
devtools::install_github('Mikata-Project/ggthemr')
install.packages("ps")
devtools::install_github('Mikata-Project/ggthemr')
install.packages("testthat")
devtools::install_github('Mikata-Project/ggthemr')
devtools::install_github('Mikata-Project/ggthemr')
devtools::install_github('Mikata-Project/ggthemr')
#Shiny EPH individual
library(eph)
library(dplyr)
library(ggplot2)
library(shiny)
library(shinyWidgets)
library(rgdal)
#shinyWidgetsGallery()
Sys.setenv(LANG = "en")
options(encoding = 'UTF-8')
concurrencias <- read.csv("Concurrencias.csv")
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
concurrencias$lugar.abr <- paste(substr(concurrencias$lugar, 1, 10), "...", sep = "")
concurrencias$lugar.abr <- factor(concurrencias$lugar.abr, levels = sort(unique(concurrencias$lugar.abr)))
#mapa
library(leaflet)
library(tmap)
library(sf)
library(tmaptools)
library(OpenStreetMap)
paleta <- c("#258039", "#CF3721", "#F5BE41", "#31A9B8")
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
df <- st_as_sf(x = concurrencias,
coords = c("longitud", "latitud"),
crs = projcrs)
box.ush <- st_bbox(df)
expansion <- 1/240
box.ush[[1]] <- box.ush[[1]] - expansion
box.ush[[2]] <- box.ush[[2]] - expansion
box.ush[[3]] <- box.ush[[3]] + expansion
box.ush[[4]] <- box.ush[[4]] + expansion
tmap_mode("view") #"view" para que sea interactivo, "plot" para que sea estatico
#####################
#EMPIEZA EL SHINY
#####################
#Preset del ggplot:
tema_mati <- function(){
theme(panel.border = element_blank(),  panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = "darkGREY",
size = 1, linetype = "solid"),
panel.grid.major.y = element_line(size = 0.1, color="darkGREY", linetype = "dashed" ),
strip.background =element_rect(fill="#c9acff"))
}
#UI
ui <- fluidPage(
titlePanel("Concurrencias en locales de Ushuaia"),
sidebarLayout(
sidebarPanel(pickerInput("lugar", "Seleccionar local", choices = sort(unique(as.character(concurrencias$lugar))), options = list("live-search" = TRUE, `actions-box` = TRUE), multiple = TRUE),
awesomeCheckboxGroup("dia.semana", "Día de la semana", choices = unique(as.character(concurrencias$dia)), selected = unique(concurrencias$dia), inline = TRUE),
),
mainPanel(tabsetPanel(
tabPanel('Observaciones iniciales',
plotOutput('plot.concurrencia'),
leafletOutput("mapa")),
tabPanel('Métricas resumen',
plotOutput('boxplot.dia'),
plotOutput('boxplot.hora'),
img(src="Video completo.gif", align = "center", height='750px', width='750px'))
)
)
)
)
#Server
server <- function(input, output, session){
output$plot.concurrencia <- renderPlot({
concurrencias %>%
filter(lugar %in% input$lugar,
dia %in% input$dia.semana) %>%
ggplot(aes(x = hora, y = concurrencia, fill = lugar.abr)) +
geom_col(position = "dodge") +
xlab("Hora del día") +
ylab("Concurrencia") +
tema_mati() +
facet_grid(dia~.)
})
output$mapa <- renderLeaflet({
tmap_leaflet(tm_shape(df[df$lugar %in% input$lugar,], bbox = box.ush) +
tm_dots(shape = 21, col = paleta[3], size = 0.2) +
tm_text("lugar.abr", ymod = -0.6, size = 1, just = "center")
)
})
output$boxplot.dia <- renderPlot({
ggplot(concurrencias, aes(x = hora, y = concurrencia, group = hora)) +
geom_boxplot() +
facet_wrap(~dia)
})
output$boxplot.hora <- renderPlot({
ggplot(concurrencias, aes(x = dia, y = concurrencia, group = dia)) +
geom_boxplot() +
facet_wrap(~hora)
})
}
#App
shinyApp(ui = ui, server = server)
#Shiny EPH individual
library(eph)
library(dplyr)
library(ggplot2)
library(shiny)
library(shinyWidgets)
library(rgdal)
#shinyWidgetsGallery()
Sys.setenv(LANG = "en")
options(encoding = 'UTF-8')
concurrencias <- read.csv("Concurrencias.csv")
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
concurrencias$lugar.abr <- paste(substr(concurrencias$lugar, 1, 10), "...", sep = "")
concurrencias$lugar.abr <- factor(concurrencias$lugar.abr, levels = sort(unique(concurrencias$lugar.abr)))
#mapa
library(leaflet)
library(tmap)
library(sf)
library(tmaptools)
library(OpenStreetMap)
paleta <- c("#258039", "#CF3721", "#F5BE41", "#31A9B8")
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
df <- st_as_sf(x = concurrencias,
coords = c("longitud", "latitud"),
crs = projcrs)
box.ush <- st_bbox(df)
expansion <- 1/240
box.ush[[1]] <- box.ush[[1]] - expansion
box.ush[[2]] <- box.ush[[2]] - expansion
box.ush[[3]] <- box.ush[[3]] + expansion
box.ush[[4]] <- box.ush[[4]] + expansion
tmap_mode("view") #"view" para que sea interactivo, "plot" para que sea estatico
#####################
#EMPIEZA EL SHINY
#####################
#Preset del ggplot:
tema_mati <- function(){
theme(panel.border = element_blank(),  panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = "darkGREY",
size = 1, linetype = "solid"),
panel.grid.major.y = element_line(size = 0.1, color="darkGREY", linetype = "dashed" ),
strip.background =element_rect(fill="#c9acff"))
}
#UI
ui <- fluidPage(
titlePanel("Concurrencias en locales de Ushuaia"),
sidebarLayout(
sidebarPanel(pickerInput("lugar", "Seleccionar local", choices = sort(unique(as.character(concurrencias$lugar))), options = list("live-search" = TRUE, `actions-box` = TRUE), multiple = TRUE),
awesomeCheckboxGroup("dia.semana", "Día de la semana", choices = unique(as.character(concurrencias$dia)), selected = unique(concurrencias$dia), inline = TRUE),
),
mainPanel(tabsetPanel(
tabPanel('Observaciones iniciales',
plotOutput('plot.concurrencia'),
leafletOutput("mapa")),
tabPanel('Métricas resumen',
plotOutput('boxplot.dia'),
plotOutput('boxplot.hora'),
img(src="Video completo.gif", align = "center", height='750px', width='750px'))
)
)
)
)
#Server
server <- function(input, output, session){
output$plot.concurrencia <- renderPlot({
concurrencias %>%
filter(lugar %in% input$lugar,
dia %in% input$dia.semana) %>%
ggplot(aes(x = hora, y = concurrencia, fill = lugar.abr)) +
geom_col(position = "dodge") +
xlab("Hora del día") +
ylab("Concurrencia") +
tema_mati() +
facet_grid(dia~.)
})
output$mapa <- renderLeaflet({
tmap_leaflet(tm_shape(df[df$lugar %in% input$lugar,], bbox = box.ush) +
tm_dots(shape = 21, col = paleta[3], size = 0.2) +
tm_text("lugar.abr", ymod = -0.6, size = 1, just = "center")
)
})
output$boxplot.dia <- renderPlot({
ggplot(concurrencias, aes(x = hora, y = concurrencia, group = hora)) +
geom_boxplot() +
facet_grid(dia~.) +
tema_mati()
})
output$boxplot.hora <- renderPlot({
ggplot(concurrencias, aes(x = dia, y = concurrencia, group = dia)) +
geom_boxplot() +
facet_grid(hora~.) +
tema_mati()
})
}
#App
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
concurrencias
str_split_fixed(concurrencias$lugar, ",", 3)
stringr::str_split_fixed(concurrencias$lugar, ",", 3)
head(stringr::str_split_fixed(concurrencias$lugar, ",", 3))
concurrencias %>%
stringr::str_split_fixed(lugar, ",", 3)
concurrencias %>%
stringr::str_split_fixed(concurrencias$lugar, ",", 3)
str_split_fixed(lugar, ",", 3)[,1:2]
library(stringr)
str_split_fixed(lugar, ",", 3)[,1:2]
str_split_fixed(concurrencias$lugar, ",", 3)[,1:2]
concurrencias$nombre, concurrencias$direccion <- str_split_fixed(concurrencias$lugar, ",", 3)[,1:2]
nombre.direccion <- str_split_fixed(concurrencias$lugar, ",", 3)[,1:2]
names(nombre.direccion)
nombre.direccion <- as.data.frame(str_split_fixed(concurrencias$lugar, ",", 3)[,1:2], col.names = c("nombre", "direccion"))
nombre.direccion
nombre.direccion <- as.data.frame(str_split_fixed(concurrencias$lugar, ",", 3)[,1:2], col.names = c("nombre", "direccion"), fix.empty.names = FALSE)
nombre.direccion
nombre.direccion <- as.data.frame(str_split_fixed(concurrencias$lugar, ",", 3)[,1:2], col.names = c("nombre", "direccion"), make.names = FALSE)
nombre.direccion
names(nombre.direccion) <- c("nombre", "direccion")
names(nombre.direccion)
trimws(nombre.direccion)
nombre.direccion <- trimws(nombre.direccion)
nombre.direccion
nombre.direccion <- as.data.frame(str_split_fixed(concurrencias$lugar, ",", 3)[,1:2])
names(nombre.direccion) <- c("nombre", "direccion")
nombre.direccion$nombre <- trimws(nombre.direccion$nombre)
nombre.direccion$direccion <- trimws(nombre.direccion$direccion)
nombre.direccion
concurrencias <- cbind(concurrencias, nombre.direccion)
concurrencias
names(concurrencias)
shinyWidgetsGallery()
concurrencias %>%
filter(dia = input$dia,
between(hora, input$hora)) %>%
group_by(nombre, direccion, dia) %>%
summarise(Suma.concurrencias = sum(concurrencias, na.rm = TRUE)) %>%
arrange(desc(Suma.concurrencias)) %>%
mutate(Posición = 1:n()) %>%
relocate(Posición, nombre, direccion, Suma.concurrencias)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
concurrencias %>%
filter(dia %in% c("lunes", "jueves"),
between(hora, 0, 23)) %>%
group_by(nombre, direccion) %>%
summarise(Suma.concurrencias = sum(concurrencias, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(Suma.concurrencias)) %>%
mutate(Posición = 1:n()) %>%
relocate(Posición, nombre, direccion, Suma.concurrencias)
concurrencias %>%
filter(dia %in% c("lunes", "jueves"),
between(hora, 0, 23))
concurrencias %>%
filter(dia %in% c("lunes", "jueves"),
between(hora, 0, 23)) %>%
group_by(nombre, direccion)
concurrencias %>%
filter(dia %in% c("lunes", "jueves"),
between(hora, 0, 23)) %>%
group_by(nombre, direccion) %>%
summarise(Suma.concurrencias = sum(concurrencias, na.rm = TRUE))
concurrencias %>%
filter(dia %in% c("lunes", "jueves"),
between(hora, 0, 23)) %>%
group_by(nombre, direccion) %>%
summarise(Suma.concurrencias = sum(concurrencia, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(Suma.concurrencias)) %>%
mutate(Posición = 1:n()) %>%
relocate(Posición, nombre, direccion, Suma.concurrencias)
runApp()
c("") != ""
c("a", "b") != ""
c("a", "b") %in% ""
"" != c("a", "b")
"" %in% c("a", "b")
"" %in% c("")
runApp()
runApp()
shinyWidgetsGallery()
runApp()
runApp()
runApp()
concurrencias %>%
filter(dia %in% c("lunes", "jueves"),
between(hora, 0, 23)) %>%
group_by(nombre, direccion, latitud, longitud) %>%
summarise(Suma.concurrencias = sum(concurrencia, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(Suma.concurrencias)) %>%
mutate(Posición = 1:n()) %>%
relocate(Posición, nombre, direccion, Suma.concurrencias, latitud, longitud)
a <- concurrencias %>%
filter(dia %in% c("lunes", "jueves"),
between(hora, 0, 23)) %>%
group_by(nombre, direccion, latitud, longitud) %>%
summarise(Suma.concurrencias = sum(concurrencia, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(Suma.concurrencias)) %>%
mutate(Posición = 1:n()) %>%
relocate(Posición, nombre, direccion, Suma.concurrencias, latitud, longitud)
st_as_sf(x = a,
coords = c("longitud", "latitud"),
crs = projcrs)
b <- st_as_sf(x = a,
coords = c("longitud", "latitud"),
crs = projcrs)
class(b)
class(df)
b <- st_as_sf(x = as.data.frame(a),
coords = c("longitud", "latitud"),
crs = projcrs)
class(b)
runApp()
runApp()
runApp()
runApp()
runApp()
1+2
concurrencias %>%
filter(dia %in% c("lunes", "jueves"),
between(hora, 0, 23)) %>%
group_by(nombre, direccion, latitud, longitud) %>%
summarise(Suma.concurrencias = sum(concurrencia, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(Suma.concurrencias)) %>%
mutate(Posición = row_number()) %>%
relocate(Posición, nombre, direccion, Suma.concurrencias, latitud, longitud)
concurrencias %>%
filter(dia %in% c("lunes", "martes", "miercoles", "jueves", "viernes", "sabado", "domingo"),
between(hora, 0, 23)) %>%
group_by(nombre, direccion, latitud, longitud) %>%
summarise(Suma.concurrencias = sum(concurrencia, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(Suma.concurrencias)) %>%
mutate(Posición = row_number()) %>%
relocate(Posición, nombre, direccion, Suma.concurrencias, latitud, longitud)
concurrencias %>%
filter(dia %in% c("lunes", "martes", "miercoles", "jueves", "viernes", "sabado", "domingo"),
between(hora, 0, 23)) %>%
group_by(nombre, direccion, latitud, longitud) %>%
summarise(Suma.concurrencias = sum(concurrencia, na.rm = TRUE)) %>%
arrange(desc(Suma.concurrencias)) %>%
mutate(Posición = row_number()) %>%
relocate(Posición, nombre, direccion, Suma.concurrencias, latitud, longitud)
reactive({concurrencias %>%
filter(dia %in% c("lunes", "martes", "miercoles", "jueves", "viernes", "sabado", "domingo"),
between(hora, 0, 23)) %>%
group_by(nombre, direccion, latitud, longitud) %>%
summarise(Suma.concurrencias = sum(concurrencia, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(Suma.concurrencias)) %>%
mutate(Posición = row_number()) %>%
relocate(Posición, nombre, direccion, Suma.concurrencias, latitud, longitud)})
ranking <- reactive({concurrencias %>%
filter(dia %in% c("lunes", "martes", "miercoles", "jueves", "viernes", "sabado", "domingo"),
between(hora, 0, 23)) %>%
group_by(nombre, direccion, latitud, longitud) %>%
summarise(Suma.concurrencias = sum(concurrencia, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(Suma.concurrencias)) %>%
mutate(Posición = row_number()) %>%
relocate(Posición, nombre, direccion, Suma.concurrencias, latitud, longitud)})
class(ranking())
class(ranking)
ranking
runApp()
runApp()
runApp()
runApp()
runApp()
str(concurrencias)
runApp()
runApp()
