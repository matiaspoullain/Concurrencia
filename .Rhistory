data.table::setkey(loc.concurrencia, start) # para hacer el join
data.table::setkey(loc.hora, start)
df <- as.data.frame(loc.concurrencia[loc.hora, roll = "nearest"]) # join menos estricto, joinea segun cercania de caracteres
df <- df[, c(4, 1)]
} else {
df <- data.frame(hora, concurrencia) # si no hay esa concurrencia de mas, directamente junto la hora y la concurrencia
}
# aca hago mas linda la tabla
df$lugar <- lugar.a.buscar
df$dia <- dplyr::case_when(
hora > 23 & dia.semana == "lunes" ~ "martes",
hora > 23 & dia.semana == "martes" ~ "miercoles",
hora > 23 & dia.semana == "miercoles" ~ "jueves",
hora > 23 & dia.semana == "jueves" ~ "viernes",
hora > 23 & dia.semana == "viernes" ~ "sabado",
hora > 23 & dia.semana == "sabado" ~ "domingo",
hora > 23 & dia.semana == "domingo" ~ "lunes",
TRUE ~ dia.semana
)
df$hora <- dplyr::if_else(df$hora > 23, df$hora - 24, df$hora)
df$fecha.de.busqueda <- Sys.Date() # este lo agrego por las dudas, no se cuanto cambia segun el dia que se busca
df$latitud <- as.numeric(latitud)
df$longitud <- as.numeric(longitud)
df <- df[, c(3, 4, 1, 2, 6, 7, 5)]
df
} else {
remDr$close()
return("Sin datos de concurrencia")
}
} else {
remDr$close()
}
sgat_day("arredondo", "viernes")
viernes <- sgat_day("arredondo", "viernes")
viernes <- sgat_day("arredondo", "viernes")
loc.concurrencia
loc.hora
remDr$open() # abre firefox
remDr$navigate("https://www.google.com.ar") # va a google.com.ar
webElem <- remDr$findElement(using = "name", value = "q") # selecciona el recuadro de busqueda
webElem$sendKeysToElement(list(paste(lugar.a.buscar, "horarios", dia.semana), "\uE007")) # escribe el lugar.a.buscar y hace la busqueda
apertura <- NA_character_ # para empezar el loop que sigue
concurrencia <- NA_character_ # para empezar el loop que sigue
x <- 0
while (x <= tiempo.espera & replace(apertura[1], is.na(apertura[1]), "0") != "Cerrado" & is.na(concurrencia[1])) {
source <- remDr$getPageSource()[[1]] # codigo de fuente de la pagina de google
apertura <- qdapRegex::ex_between(source, '"TLou0b JjSWRd">', "<")[[1]] # entre estos characteres, google dice si el lugar esta cerrado o abierto este dia, si esta cerrado se cierra firefox y se vuelve a empezar
concurrencia <- qdapRegex::ex_between(source, 'class="cwiwob', "px")[[1]] # extrae la cantidad de concurrencia en unidades de pixel que aparece en el grafico de concurrencia
x <- x + 1
}
!("Cerrado" %in% replace(apertura[1], is.na(apertura[1]), "0"))
!is.na(concurrencia[1])
coordenadas <- qdapRegex::ex_between(source, 'data-url="/maps/place/', ",15z")
remDr$close() # cierra firefox, ya no se necesita
coordenadas <- sub(".*@", "", coordenadas)
latitud <- sub(",.*", "", coordenadas)
longitud <- sub(".*,", "", coordenadas)
concurrencia <- as.numeric(sub(".*:", "", concurrencia)) # me quedo solo con la parte interesante del string
hora <- qdapRegex::ex_between(source, "data-hour=", " jsaction")[[1]] # extrae la hora a la que corresponden las concurrencias
hora <- as.numeric(gsub("[^0-9.-]", "", hora)) # me quedo solo con la parte interesante del string
length(concurrencia) != length(hora)
loc.concurrencia <- data.table::data.table(concurrencia, data.frame(stringr::str_locate_all(source, 'class="cwiwob'))) # ubicaciones de los characteres encontrados
loc.hora <- data.table::data.table(hora, data.frame(stringr::str_locate_all(source, "data-hour=")))
data.table::setkey(loc.concurrencia, "start") # para hacer el join
data.table::setkey(loc.hora, "start")
df <- as.data.frame(loc.concurrencia[loc.hora, roll = "nearest"]) # join menos estricto, joinea segun cercania de caracteres
df <- df[, c(4, 1)]
# aca hago mas linda la tabla
df$lugar <- lugar.a.buscar
df$dia <- dplyr::case_when(
hora > 23 & dia.semana == "lunes" ~ "martes",
hora > 23 & dia.semana == "martes" ~ "miercoles",
hora > 23 & dia.semana == "miercoles" ~ "jueves",
hora > 23 & dia.semana == "jueves" ~ "viernes",
hora > 23 & dia.semana == "viernes" ~ "sabado",
hora > 23 & dia.semana == "sabado" ~ "domingo",
hora > 23 & dia.semana == "domingo" ~ "lunes",
TRUE ~ dia.semana
)
df$hora <- dplyr::if_else(df$hora > 23, df$hora - 24, df$hora)
df$fecha.de.busqueda <- Sys.Date() # este lo agrego por las dudas, no se cuanto cambia segun el dia que se busca
df$latitud <- as.numeric(latitud)
df$longitud <- as.numeric(longitud)
df <- df[, c(3, 4, 1, 2, 6, 7, 5)]
df
#' @param dia.semana Day of the week from when you want to retrieve the "Popular Times" information
#' @param tiempo.espera Time measure of how much time you think it's sufficient given your internet connection to load a Google search page and not finding the information,
#'
#' @return dataframe with retrieved information for single weekday
#' @export
#'
#' @examples
#' \dontrun{museo.miercoles <- sgat_day("museo nacional de bellas artes, buenos aires, argentina", "miercoles")
#' head(museo.miercoles)}
#'
sgat_day <- function(lugar.a.buscar, dia.semana, tiempo.espera = 10) {
remDr$open() # abre firefox
remDr$navigate("https://www.google.com.ar") # va a google.com.ar
webElem <- remDr$findElement(using = "name", value = "q") # selecciona el recuadro de busqueda
webElem$sendKeysToElement(list(paste(lugar.a.buscar, "horarios", dia.semana), "\uE007")) # escribe el lugar.a.buscar y hace la busqueda
apertura <- NA_character_ # para empezar el loop que sigue
concurrencia <- NA_character_ # para empezar el loop que sigue
x <- 0
while (x <= tiempo.espera & replace(apertura[1], is.na(apertura[1]), "0") != "Cerrado" & is.na(concurrencia[1])) {
source <- remDr$getPageSource()[[1]] # codigo de fuente de la pagina de google
apertura <- qdapRegex::ex_between(source, '"TLou0b JjSWRd">', "<")[[1]] # entre estos characteres, google dice si el lugar esta cerrado o abierto este dia, si esta cerrado se cierra firefox y se vuelve a empezar
concurrencia <- qdapRegex::ex_between(source, 'class="cwiwob', "px")[[1]] # extrae la cantidad de concurrencia en unidades de pixel que aparece en el grafico de concurrencia
x <- x + 1
}
if (!("Cerrado" %in% replace(apertura[1], is.na(apertura[1]), "0"))) {
if (!is.na(concurrencia[1])) {
coordenadas <- qdapRegex::ex_between(source, 'data-url="/maps/place/', ",15z")
remDr$close() # cierra firefox, ya no se necesita
coordenadas <- sub(".*@", "", coordenadas)
latitud <- sub(",.*", "", coordenadas)
longitud <- sub(".*,", "", coordenadas)
concurrencia <- as.numeric(sub(".*:", "", concurrencia)) # me quedo solo con la parte interesante del string
hora <- qdapRegex::ex_between(source, "data-hour=", " jsaction")[[1]] # extrae la hora a la que corresponden las concurrencias
hora <- as.numeric(gsub("[^0-9.-]", "", hora)) # me quedo solo con la parte interesante del string
# En este punto se genera un problema: si la busqueda se realiza en una hora en la que el local esta abierto, google agrega adem?s la concurrencia actual observada, por lo que hay mas numeros de concurrencia que de horarios, este if sirve para ignorar ese numero de mas
if (length(concurrencia) != length(hora)) {
loc.concurrencia <- data.table::data.table(concurrencia, data.frame(stringr::str_locate_all(source, 'class="cwiwob'))) # ubicaciones de los characteres encontrados
loc.hora <- data.table::data.table(hora, data.frame(stringr::str_locate_all(source, "data-hour=")))
data.table::setkey(loc.concurrencia, "start") # para hacer el join
data.table::setkey(loc.hora, "start")
df <- as.data.frame(loc.concurrencia[loc.hora, roll = "nearest"]) # join menos estricto, joinea segun cercania de caracteres
df <- df[, c(4, 1)]
} else {
df <- data.frame(hora, concurrencia) # si no hay esa concurrencia de mas, directamente junto la hora y la concurrencia
}
# aca hago mas linda la tabla
df$lugar <- lugar.a.buscar
df$dia <- dplyr::case_when(
hora > 23 & dia.semana == "lunes" ~ "martes",
hora > 23 & dia.semana == "martes" ~ "miercoles",
hora > 23 & dia.semana == "miercoles" ~ "jueves",
hora > 23 & dia.semana == "jueves" ~ "viernes",
hora > 23 & dia.semana == "viernes" ~ "sabado",
hora > 23 & dia.semana == "sabado" ~ "domingo",
hora > 23 & dia.semana == "domingo" ~ "lunes",
TRUE ~ dia.semana
)
df$hora <- dplyr::if_else(df$hora > 23, df$hora - 24, df$hora)
df$fecha.de.busqueda <- Sys.Date() # este lo agrego por las dudas, no se cuanto cambia segun el dia que se busca
df$latitud <- as.numeric(latitud)
df$longitud <- as.numeric(longitud)
df <- df[, c(3, 4, 1, 2, 6, 7, 5)]
df
} else {
remDr$close()
return("Sin datos de concurrencia")
}
} else {
remDr$close()
}
}
viernes <- sgat_day("arredondo", "viernes")
rm(list=ls()
)
source("Restaurantes tripadvisor.R")
library(sgat)
initialization_sgat()
rest.pinamar <- restaurantes_general("Pinamar, argentina")
rest.pinamar <- paste(rest.pinamar, ", Pinamar, Argentina", sep = "")
rest.pinamar
va.por <- rest.pinamar[5]
salieron.mal <- c()
for(resta in rest.pinamar[which(rest.pinamar == va.por):length(rest.pinamar)]){
print(paste("Va por ", which(rest.pinamar == va.por), " de ", length(rest.pinamar), ": ", which(rest.pinamar == va.por)/length(rest.pinamar), sep = "" ))
concurrencia.pinamar <- 1
class(concurrencia.pinamar) <- "try-error"
intento <- 1
while(class(concurrencia.pinamar) == "try-error" & intento <= 5){
concurrencia.pinamar <- try(sgat(resta, carpeta.guardado = "CSVs Concurrencias/restaurantes pinamar", tiempo.espera = 15), silent = TRUE)
intento <- intento + 1
}
if(class(concurrencia.pinamar) == "try-error"){
salieron.mal <- c(salieron.mal, resta)
}
va.por <- resta
}
salieron.mal
for(resta in salieron.mal){
print(paste("Va por ", which(salieron.mal == resta), " de ", length(salieron.mal), ": ", round(100*which(salieron.mal == resta)/length(salieron.mal),2), sep = "" ))
concurrencia.pinamar <- 1
class(concurrencia.pinamar) <- "try-error"
intento <- 1
while(class(concurrencia.pinamar) == "try-error" & intento <= 5){
concurrencia.pinamar <- try(sgat(resta, carpeta.guardado = "CSVs Concurrencias/restaurantes pinamar", tiempo.espera = 15), silent = TRUE)
intento <- intento + 1
}
if(class(concurrencia.pinamar) == "try-error"){
salieron.mal <- c(salieron.mal, resta)
}
va.por <- resta
}
salieron.mal
unique(salieron.mal)
rm(list = ls())
archivos <- list.files("CSVs Concurrencias/restaurantes pinamar")
library(dplyr)
library(ggplot2)
library(shiny)
library(shinyWidgets)
library(rgdal)
library(stringr)
concurrencias <- data.frame()
archivos <- list.files("CSVs Concurrencias/restaurantes pinamar", full.names = TRUE)
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(archivos)
concurrencias <- rbind(concurrencias, concurrencia)
}
archivos
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(archivos)
concurrencias <- rbind(concurrencias, concurrencia)
}
archivos <- list.files("CSVs Concurrencias/restaurantes pinamar")
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(paste("CSVs Concurrencias/Restaurantes/", i, sep = ""))
concurrencias <- rbind(concurrencias, concurrencia)
}
archivos <- list.files("CSVs Concurrencias/restaurantes pinamar")
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(paste("CSVs Concurrencias/restaurantes pinamar/", i, sep = ""))
concurrencias <- rbind(concurrencias, concurrencia)
}
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(paste("CSVs Concurrencias/restaurantes pinamar/", i, sep = ""))
concurrencias <- rbind(concurrencias, concurrencia)
}
archivos <- list.files("CSVs Concurrencias/restaurantes pinamar")
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(paste("CSVs Concurrencias/restaurantes pinamar/", i, sep = ""))
concurrencias <- rbind(concurrencias, concurrencia)
}
concurrencias
concurrencias
dim(concurrencias)
length(archivos)
length(unique(interaction(concurrencias$latitud, concurrencias$longitud)))
str(concurrencias)
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
write.csv(concurrencias, file = "Concurrencias_Pinamar/Concurrencias.csv")
Sys.setenv(LANG = "en")
options(encoding = 'UTF-8')
concurrencias <- read.csv("Concurrencias.csv")
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
concurrencias$lugar.abr <- paste(substr(concurrencias$lugar, 1, 10), "...", sep = "")
concurrencias$lugar.abr <- factor(concurrencias$lugar.abr, levels = sort(unique(concurrencias$lugar.abr)))
nombre.direccion <- as.data.frame(str_split_fixed(concurrencias$lugar, ",", 3)[,1:2])
names(nombre.direccion) <- c("nombre", "direccion")
nombre.direccion$nombre <- trimws(nombre.direccion$nombre)
nombre.direccion$direccion <- trimws(nombre.direccion$direccion)
concurrencias <- cbind(concurrencias, nombre.direccion)
#mapa
library(leaflet)
library(tmap)
library(sf)
library(tmaptools)
library(OpenStreetMap)
paleta <- c("#258039", "#CF3721", "#F5BE41", "#31A9B8")
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
df <- st_as_sf(x = concurrencias,
coords = c("longitud", "latitud"),
crs = projcrs)
box.ush <- st_bbox(df)
expansion <- 1/240
box.ush[[1]] <- box.ush[[1]] - expansion
box.ush[[2]] <- box.ush[[2]] - expansion
box.ush[[3]] <- box.ush[[3]] + expansion
box.ush[[4]] <- box.ush[[4]] + expansion
tmap_mode("view") #"view" para que sea interactivo, "plot" para que sea estatico
#####################
#EMPIEZA EL SHINY
#####################
#Preset del ggplot:
tema_mati <- function(){
theme(panel.border = element_blank(),  panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = "darkGREY",
size = 1, linetype = "solid"),
panel.grid.major.y = element_line(size = 0.1, color="darkGREY", linetype = "dashed" ),
strip.background =element_rect(fill="#c9acff"))
}
#UI
ui <- fluidPage(
titlePanel("Concurrencias en locales de Ushuaia"),
sidebarLayout(
sidebarPanel(pickerInput("lugar", "Seleccionar local", choices = sort(unique(as.character(concurrencias$lugar))), options = list("live-search" = TRUE, `actions-box` = TRUE), multiple = TRUE),
awesomeCheckboxGroup("dia.semana", "Día de la semana", choices = unique(as.character(concurrencias$dia)), selected = unique(concurrencias$dia), inline = TRUE),
sliderTextInput(inputId = "hora", label = "Seleccionar intervalo de horas del día", choices = 0:23, selected = c(0, 23))),
mainPanel(tabsetPanel(
tabPanel('Observaciones iniciales',
plotly::plotlyOutput('plot.concurrencia'),
leafletOutput("mapa")),
tabPanel('Métricas resumen',
plotOutput('boxplot.dia'),
img(src="Video completo.gif", align = "center", height='750px', width='750px')),
tabPanel('Más concurridos',
DT::DTOutput("mas.concurridos"),
leafletOutput("mapa.ranking"))
)
)
)
)
#Server
server <- function(input, output, session){
ranking <- reactive({
concurrencias %>%
filter(dia %in% input$dia.semana,
between(hora, input$hora[1], input$hora[2])) %>%
group_by(nombre, direccion, latitud, longitud) %>%
summarise(Suma.concurrencias = sum(concurrencia, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(Suma.concurrencias)) %>%
mutate(Posición = row_number()) %>%
relocate(Posición, nombre, direccion, Suma.concurrencias, latitud, longitud)
})
ranking.mapa <- reactive({
st_as_sf(x = as.data.frame(ranking()),
coords = c("longitud", "latitud"),
crs = projcrs)
})
output$plot.concurrencia <- plotly::renderPlotly({
validate(need(!("" %in% input$lugar | "" %in% input$dia), "Seleccione al menos un local y al menos un día de la semana"))
concurrencias %>%
filter(lugar %in% input$lugar,
dia %in% input$dia.semana) %>%
ggplot(aes(x = hora, y = concurrencia, fill = lugar.abr)) +
geom_col(position = "dodge") +
xlab("Hora del día") +
ylab("Concurrencia") +
tema_mati() +
facet_grid(dia~.)
})
output$mapa <- renderLeaflet({
tmap_leaflet(tm_shape(df[df$lugar %in% input$lugar,], bbox = box.ush) +
tm_dots(shape = 21, col = paleta[3], size = 0.2) +
tm_text("lugar.abr", ymod = -0.6, size = 1, just = "center")
)
})
output$boxplot.dia <- renderPlot({
ggplot(concurrencias, aes(x = hora, y = concurrencia, group = hora)) +
geom_boxplot() +
facet_grid(dia~.) +
tema_mati()
})
output$mas.concurridos <- DT::renderDT({
ranking()%>%
select(Posición, nombre, direccion, Suma.concurrencias)})
output$mapa.ranking <- renderLeaflet({
ranking.mapa <- ranking.mapa()
tmap_leaflet(tm_shape(ranking.mapa, bbox = box.ush) +
tm_dots(shape = 21, size = 0.2, col = "Suma.concurrencias") +
tm_text("Posición", size = 1, just = "center")
)
})
}
#App
shinyApp(ui = ui, server = server)
library(tmap)
library(sf)
library(tmaptools)
library(OpenStreetMap)
paleta <- c("#258039", "#CF3721", "#F5BE41", "#31A9B8")
library(RColorBrewer)
paleta6 <- colorRampPalette(paleta)(6)
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
df <- st_as_sf(x = concurrencias,
coords = c("longitud", "latitud"),
crs = projcrs)
box.ush <- st_bbox(df)
expansion <- 1/240
box.ush[[1]] <- box.ush[[1]] - expansion
box.ush[[2]] <- box.ush[[2]] - expansion
box.ush[[3]] <- box.ush[[3]] + expansion
box.ush[[4]] <- box.ush[[4]] + expansion
ushuaia <- read_osm(box.ush, ext = 1.1, raster = TRUE, type = "stamen-toner")
tmap_mode("plot") #"view" para que sea interactivo, "plot" para que sea estatico
mapa.ubicaciones <- tm_shape(ushuaia, bbox = box.ush) +
tm_rgb(alpha = 0.5) +
tm_shape(df) +
tm_dots(shape = 21, col = paleta[3], size = 0.2) +
tm_scale_bar(text.size = 0.3, color.dark = "grey", text.color = "grey", position = c("center", "top")) + #escala
tm_compass(north = 180, text.color = "grey", color.dark = "grey", position = c( "left", "top"), text.size = 0.3, cardinal.directions = "S")+ #flecha de norte y su posicion osbre el mapa
tm_grid(projection = projcrs, lines = FALSE, labels.inside.frame= TRUE, labels.size = 0.3)
mapa.ubicaciones
#animacion mapa:
#primero creo los datos para cada horario de la semana y cada lugar:
exp.grd <- expand.grid(0:23, unique(concurrencias$dia), unique(concurrencias$lugar))
names(exp.grd) <- c("hora", "dia", "lugar")
df.anim <- merge(exp.grd, concurrencias[, c("hora", "dia", "lugar", "concurrencia")], by = c("hora", "dia", "lugar"), all.x = TRUE)
df.anim <- merge(df.anim, unique(concurrencias[, c("lugar", "longitud", "latitud")]), by = c("lugar"), all.x = TRUE)
df.anim[is.na(df.anim$concurrencia), "concurrencia"] <- 0
df.anim$concurrencia.esc <- df.anim$concurrencia / max(df.anim$concurrencia)
df.anim <- st_as_sf(x = df.anim,
coords = c("longitud", "latitud"),
crs = projcrs)
dias.semana <- unique(concurrencias$dia)
y <- 1
for(dia in dias.semana){
df.loop1 <- df.anim[df.anim$dia == dia,]
x <- 0
while(x < 24){
df.loop2 <- df.loop1[df.loop1$hora == x,]
mapa.animacion <- tm_shape(ushuaia, bbox = box.ush) +
tm_rgb(alpha = 0.5) +
tm_shape(df.loop2) +
tm_dots(shape = 21, col = paleta[3], size = "concurrencia.esc", legend.size.show = FALSE, alpha = 0.7) +
tm_scale_bar(text.size = 0.3, color.dark = "grey", text.color = "grey", position = c("center", "top")) + #escala
tm_compass(north = 180, text.color = "grey", color.dark = "grey", position = c( "left", "top"), text.size = 0.3, cardinal.directions = "S")+ #flecha de norte y su posicion osbre el mapa
tm_grid(projection = projcrs, lines = FALSE, labels.inside.frame= TRUE, labels.size = 0.3) +
tm_layout(main.title= paste(dia, x, "hs", sep = " "),
title.position = c('left', 'top'),
main.title.size = 0.4)
tmap_save(mapa.animacion, filename = paste("Graficos iniciales/Mapas animacion Pinamar/Mapa_", formatC(y, width=3, flag="0"), ".png", sep = ""), width = 750, height = 750)#https://stackoverflow.com/questions/42086603/producing-an-inset-map-with-the-tmap-package-in-r
x <- x + 1
y <- y + 1
print(paste("Va por ", dia, " ", x, "hs: ", round(100 * (y-1) / (7*24), 2), "%", sep = ""))
}
}
lista.imagenes <- list.files("Graficos iniciales/Mapas animacion Pinamar", full.names = T)
library(gifski)
gifski(lista.imagenes, 'Graficos iniciales/Video completo.gif', delay = 1/6, width = 750, height = 750)
dias.semana <- unique(concurrencias$dia)
y <- 1
for(dia in dias.semana){
df.loop1 <- df.anim[df.anim$dia == dia,]
x <- 0
while(x < 24){
df.loop2 <- df.loop1[df.loop1$hora == x,]
mapa.animacion <- tm_shape(ushuaia, bbox = box.ush) +
tm_rgb(alpha = 0.5) +
tm_shape(df.loop2) +
tm_dots(shape = 21, col = paleta[3], size = "concurrencia.esc", legend.size.show = FALSE, alpha = 0.7) +
tm_scale_bar(text.size = 0.3, color.dark = "grey", text.color = "grey", position = c("center", "top")) + #escala
tm_compass(north = 180, text.color = "grey", color.dark = "grey", position = c( "left", "top"), text.size = 0.3, cardinal.directions = "S")+ #flecha de norte y su posicion osbre el mapa
tm_grid(projection = projcrs, lines = FALSE, labels.inside.frame= TRUE, labels.size = 0.3) +
tm_layout(main.title= paste(dia, x, "hs", sep = " "),
title.position = c('left', 'top'),
main.title.size = 0.4)
tmap_save(mapa.animacion, filename = paste("Graficos iniciales/Mapas animacion Pinamar/Mapa_", formatC(y, width=3, flag="0"), ".png", sep = ""), width = 750, height = 750)#https://stackoverflow.com/questions/42086603/producing-an-inset-map-with-the-tmap-package-in-r
x <- x + 1
y <- y + 1
print(paste("Va por ", dia, " ", x, "hs: ", round(100 * (y-1) / (7*24), 2), "%", sep = ""))
}
}
lista.imagenes <- list.files("Graficos iniciales/Mapas animacion Pinamar", full.names = T)
library(gifski)
gifski(lista.imagenes, 'Graficos iniciales/Video completo Pinamar.gif', delay = 1/6, width = 750, height = 750)
archivos <- list.files("CSVs Concurrencias/restaurantes pinamar")
archivos
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(paste("CSVs Concurrencias/restaurantes pinamar/", i, sep = ""))
concurrencias <- rbind(concurrencias, concurrencia)
}
concurrencias
dim(concurrencias)
dim(unique(concurrencias))
length(archivos)
length(unique(interaction(concurrencias$latitud, concurrencias$longitud)))
str(concurrencias)
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
wirte.csv(concurrencias, "Concurrencias_Pinamar/Concurrencias.csv")
write.csv(concurrencias, "Concurrencias_Pinamar/Concurrencias.csv", row.names = FALSE)
archivos <- list.files("CSVs Concurrencias/restaurantes pinamar")
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(paste("CSVs Concurrencias/restaurantes pinamar/", i, sep = ""))
concurrencias <- rbind(concurrencias, concurrencia)
}
write.csv(concurrencias, "Concurrencias_Pinamar/Concurrencias.csv", row.names = FALSE, encoding = "UTF-8")
write.csv(concurrencias, "Concurrencias_Pinamar/Concurrencias.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(concurrencias, "Concurrencias_Pinamar/Concurrencias.csv", row.names = FALSE, fileEncoding = "UTF-8")
library(RSelenium)
driver <- try(rsDriver(browser = "firefox", geckover = "latest"), silent = T)
driver <- try(rsDriver(browser = "firefox", geckover = "latest"), silent = T)
remDr <<- driver[["client"]]
driver <- try(rsDriver(browser = "firefox", geckover = "latest"), silent = T)
driver <- rsDriver(browser = "firefox", geckover = "latest")
gc()
driver <- rsDriver(browser = "firefox", geckover = "latest")
remDrAll <- rsDriver(browser = "firefox")
remDr <- remDrAll$client
library(RSelenium)
remDrAll <- rsDriver(browser = "firefox")
remDr <- remDrAll$client
remDr$close()
rm(remDrAll )
gc()
remDrAll <- rsDriver(browser = "firefox")
rm(list = ls())
library(RSelenium)
remDrAll <- rsDriver(browser = "firefox")
remDr <- remDrAll$client
remDr$close()
rm(remDrAll )
gc()
remDrAll <- rsDriver(browser = "firefox")
remDr$closeServer()
remDr$closeServer
remDr$closeServer()
remDrAll <- rsDriver(browser = "firefox")
remDr$closeServer
remDr$closeServer()
