concurrencias <- rbind(concurrencias, concurrencia)
}
archivos
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(archivos)
concurrencias <- rbind(concurrencias, concurrencia)
}
archivos <- list.files("CSVs Concurrencias/restaurantes pinamar")
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(paste("CSVs Concurrencias/Restaurantes/", i, sep = ""))
concurrencias <- rbind(concurrencias, concurrencia)
}
archivos <- list.files("CSVs Concurrencias/restaurantes pinamar")
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(paste("CSVs Concurrencias/restaurantes pinamar/", i, sep = ""))
concurrencias <- rbind(concurrencias, concurrencia)
}
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(paste("CSVs Concurrencias/restaurantes pinamar/", i, sep = ""))
concurrencias <- rbind(concurrencias, concurrencia)
}
archivos <- list.files("CSVs Concurrencias/restaurantes pinamar")
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(paste("CSVs Concurrencias/restaurantes pinamar/", i, sep = ""))
concurrencias <- rbind(concurrencias, concurrencia)
}
concurrencias
concurrencias
dim(concurrencias)
length(archivos)
length(unique(interaction(concurrencias$latitud, concurrencias$longitud)))
str(concurrencias)
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
write.csv(concurrencias, file = "Concurrencias_Pinamar/Concurrencias.csv")
Sys.setenv(LANG = "en")
options(encoding = 'UTF-8')
concurrencias <- read.csv("Concurrencias.csv")
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
concurrencias$lugar.abr <- paste(substr(concurrencias$lugar, 1, 10), "...", sep = "")
concurrencias$lugar.abr <- factor(concurrencias$lugar.abr, levels = sort(unique(concurrencias$lugar.abr)))
nombre.direccion <- as.data.frame(str_split_fixed(concurrencias$lugar, ",", 3)[,1:2])
names(nombre.direccion) <- c("nombre", "direccion")
nombre.direccion$nombre <- trimws(nombre.direccion$nombre)
nombre.direccion$direccion <- trimws(nombre.direccion$direccion)
concurrencias <- cbind(concurrencias, nombre.direccion)
#mapa
library(leaflet)
library(tmap)
library(sf)
library(tmaptools)
library(OpenStreetMap)
paleta <- c("#258039", "#CF3721", "#F5BE41", "#31A9B8")
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
df <- st_as_sf(x = concurrencias,
coords = c("longitud", "latitud"),
crs = projcrs)
box.ush <- st_bbox(df)
expansion <- 1/240
box.ush[[1]] <- box.ush[[1]] - expansion
box.ush[[2]] <- box.ush[[2]] - expansion
box.ush[[3]] <- box.ush[[3]] + expansion
box.ush[[4]] <- box.ush[[4]] + expansion
tmap_mode("view") #"view" para que sea interactivo, "plot" para que sea estatico
#####################
#EMPIEZA EL SHINY
#####################
#Preset del ggplot:
tema_mati <- function(){
theme(panel.border = element_blank(),  panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "white", colour = "darkGREY",
size = 1, linetype = "solid"),
panel.grid.major.y = element_line(size = 0.1, color="darkGREY", linetype = "dashed" ),
strip.background =element_rect(fill="#c9acff"))
}
#UI
ui <- fluidPage(
titlePanel("Concurrencias en locales de Ushuaia"),
sidebarLayout(
sidebarPanel(pickerInput("lugar", "Seleccionar local", choices = sort(unique(as.character(concurrencias$lugar))), options = list("live-search" = TRUE, `actions-box` = TRUE), multiple = TRUE),
awesomeCheckboxGroup("dia.semana", "Día de la semana", choices = unique(as.character(concurrencias$dia)), selected = unique(concurrencias$dia), inline = TRUE),
sliderTextInput(inputId = "hora", label = "Seleccionar intervalo de horas del día", choices = 0:23, selected = c(0, 23))),
mainPanel(tabsetPanel(
tabPanel('Observaciones iniciales',
plotly::plotlyOutput('plot.concurrencia'),
leafletOutput("mapa")),
tabPanel('Métricas resumen',
plotOutput('boxplot.dia'),
img(src="Video completo.gif", align = "center", height='750px', width='750px')),
tabPanel('Más concurridos',
DT::DTOutput("mas.concurridos"),
leafletOutput("mapa.ranking"))
)
)
)
)
#Server
server <- function(input, output, session){
ranking <- reactive({
concurrencias %>%
filter(dia %in% input$dia.semana,
between(hora, input$hora[1], input$hora[2])) %>%
group_by(nombre, direccion, latitud, longitud) %>%
summarise(Suma.concurrencias = sum(concurrencia, na.rm = TRUE)) %>%
ungroup() %>%
arrange(desc(Suma.concurrencias)) %>%
mutate(Posición = row_number()) %>%
relocate(Posición, nombre, direccion, Suma.concurrencias, latitud, longitud)
})
ranking.mapa <- reactive({
st_as_sf(x = as.data.frame(ranking()),
coords = c("longitud", "latitud"),
crs = projcrs)
})
output$plot.concurrencia <- plotly::renderPlotly({
validate(need(!("" %in% input$lugar | "" %in% input$dia), "Seleccione al menos un local y al menos un día de la semana"))
concurrencias %>%
filter(lugar %in% input$lugar,
dia %in% input$dia.semana) %>%
ggplot(aes(x = hora, y = concurrencia, fill = lugar.abr)) +
geom_col(position = "dodge") +
xlab("Hora del día") +
ylab("Concurrencia") +
tema_mati() +
facet_grid(dia~.)
})
output$mapa <- renderLeaflet({
tmap_leaflet(tm_shape(df[df$lugar %in% input$lugar,], bbox = box.ush) +
tm_dots(shape = 21, col = paleta[3], size = 0.2) +
tm_text("lugar.abr", ymod = -0.6, size = 1, just = "center")
)
})
output$boxplot.dia <- renderPlot({
ggplot(concurrencias, aes(x = hora, y = concurrencia, group = hora)) +
geom_boxplot() +
facet_grid(dia~.) +
tema_mati()
})
output$mas.concurridos <- DT::renderDT({
ranking()%>%
select(Posición, nombre, direccion, Suma.concurrencias)})
output$mapa.ranking <- renderLeaflet({
ranking.mapa <- ranking.mapa()
tmap_leaflet(tm_shape(ranking.mapa, bbox = box.ush) +
tm_dots(shape = 21, size = 0.2, col = "Suma.concurrencias") +
tm_text("Posición", size = 1, just = "center")
)
})
}
#App
shinyApp(ui = ui, server = server)
library(tmap)
library(sf)
library(tmaptools)
library(OpenStreetMap)
paleta <- c("#258039", "#CF3721", "#F5BE41", "#31A9B8")
library(RColorBrewer)
paleta6 <- colorRampPalette(paleta)(6)
projcrs <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
df <- st_as_sf(x = concurrencias,
coords = c("longitud", "latitud"),
crs = projcrs)
box.ush <- st_bbox(df)
expansion <- 1/240
box.ush[[1]] <- box.ush[[1]] - expansion
box.ush[[2]] <- box.ush[[2]] - expansion
box.ush[[3]] <- box.ush[[3]] + expansion
box.ush[[4]] <- box.ush[[4]] + expansion
ushuaia <- read_osm(box.ush, ext = 1.1, raster = TRUE, type = "stamen-toner")
tmap_mode("plot") #"view" para que sea interactivo, "plot" para que sea estatico
mapa.ubicaciones <- tm_shape(ushuaia, bbox = box.ush) +
tm_rgb(alpha = 0.5) +
tm_shape(df) +
tm_dots(shape = 21, col = paleta[3], size = 0.2) +
tm_scale_bar(text.size = 0.3, color.dark = "grey", text.color = "grey", position = c("center", "top")) + #escala
tm_compass(north = 180, text.color = "grey", color.dark = "grey", position = c( "left", "top"), text.size = 0.3, cardinal.directions = "S")+ #flecha de norte y su posicion osbre el mapa
tm_grid(projection = projcrs, lines = FALSE, labels.inside.frame= TRUE, labels.size = 0.3)
mapa.ubicaciones
#animacion mapa:
#primero creo los datos para cada horario de la semana y cada lugar:
exp.grd <- expand.grid(0:23, unique(concurrencias$dia), unique(concurrencias$lugar))
names(exp.grd) <- c("hora", "dia", "lugar")
df.anim <- merge(exp.grd, concurrencias[, c("hora", "dia", "lugar", "concurrencia")], by = c("hora", "dia", "lugar"), all.x = TRUE)
df.anim <- merge(df.anim, unique(concurrencias[, c("lugar", "longitud", "latitud")]), by = c("lugar"), all.x = TRUE)
df.anim[is.na(df.anim$concurrencia), "concurrencia"] <- 0
df.anim$concurrencia.esc <- df.anim$concurrencia / max(df.anim$concurrencia)
df.anim <- st_as_sf(x = df.anim,
coords = c("longitud", "latitud"),
crs = projcrs)
dias.semana <- unique(concurrencias$dia)
y <- 1
for(dia in dias.semana){
df.loop1 <- df.anim[df.anim$dia == dia,]
x <- 0
while(x < 24){
df.loop2 <- df.loop1[df.loop1$hora == x,]
mapa.animacion <- tm_shape(ushuaia, bbox = box.ush) +
tm_rgb(alpha = 0.5) +
tm_shape(df.loop2) +
tm_dots(shape = 21, col = paleta[3], size = "concurrencia.esc", legend.size.show = FALSE, alpha = 0.7) +
tm_scale_bar(text.size = 0.3, color.dark = "grey", text.color = "grey", position = c("center", "top")) + #escala
tm_compass(north = 180, text.color = "grey", color.dark = "grey", position = c( "left", "top"), text.size = 0.3, cardinal.directions = "S")+ #flecha de norte y su posicion osbre el mapa
tm_grid(projection = projcrs, lines = FALSE, labels.inside.frame= TRUE, labels.size = 0.3) +
tm_layout(main.title= paste(dia, x, "hs", sep = " "),
title.position = c('left', 'top'),
main.title.size = 0.4)
tmap_save(mapa.animacion, filename = paste("Graficos iniciales/Mapas animacion Pinamar/Mapa_", formatC(y, width=3, flag="0"), ".png", sep = ""), width = 750, height = 750)#https://stackoverflow.com/questions/42086603/producing-an-inset-map-with-the-tmap-package-in-r
x <- x + 1
y <- y + 1
print(paste("Va por ", dia, " ", x, "hs: ", round(100 * (y-1) / (7*24), 2), "%", sep = ""))
}
}
lista.imagenes <- list.files("Graficos iniciales/Mapas animacion Pinamar", full.names = T)
library(gifski)
gifski(lista.imagenes, 'Graficos iniciales/Video completo.gif', delay = 1/6, width = 750, height = 750)
dias.semana <- unique(concurrencias$dia)
y <- 1
for(dia in dias.semana){
df.loop1 <- df.anim[df.anim$dia == dia,]
x <- 0
while(x < 24){
df.loop2 <- df.loop1[df.loop1$hora == x,]
mapa.animacion <- tm_shape(ushuaia, bbox = box.ush) +
tm_rgb(alpha = 0.5) +
tm_shape(df.loop2) +
tm_dots(shape = 21, col = paleta[3], size = "concurrencia.esc", legend.size.show = FALSE, alpha = 0.7) +
tm_scale_bar(text.size = 0.3, color.dark = "grey", text.color = "grey", position = c("center", "top")) + #escala
tm_compass(north = 180, text.color = "grey", color.dark = "grey", position = c( "left", "top"), text.size = 0.3, cardinal.directions = "S")+ #flecha de norte y su posicion osbre el mapa
tm_grid(projection = projcrs, lines = FALSE, labels.inside.frame= TRUE, labels.size = 0.3) +
tm_layout(main.title= paste(dia, x, "hs", sep = " "),
title.position = c('left', 'top'),
main.title.size = 0.4)
tmap_save(mapa.animacion, filename = paste("Graficos iniciales/Mapas animacion Pinamar/Mapa_", formatC(y, width=3, flag="0"), ".png", sep = ""), width = 750, height = 750)#https://stackoverflow.com/questions/42086603/producing-an-inset-map-with-the-tmap-package-in-r
x <- x + 1
y <- y + 1
print(paste("Va por ", dia, " ", x, "hs: ", round(100 * (y-1) / (7*24), 2), "%", sep = ""))
}
}
lista.imagenes <- list.files("Graficos iniciales/Mapas animacion Pinamar", full.names = T)
library(gifski)
gifski(lista.imagenes, 'Graficos iniciales/Video completo Pinamar.gif', delay = 1/6, width = 750, height = 750)
archivos <- list.files("CSVs Concurrencias/restaurantes pinamar")
archivos
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(paste("CSVs Concurrencias/restaurantes pinamar/", i, sep = ""))
concurrencias <- rbind(concurrencias, concurrencia)
}
concurrencias
dim(concurrencias)
dim(unique(concurrencias))
length(archivos)
length(unique(interaction(concurrencias$latitud, concurrencias$longitud)))
str(concurrencias)
concurrencias$dia <- factor(concurrencias$dia, levels = unique(concurrencias$dia))
wirte.csv(concurrencias, "Concurrencias_Pinamar/Concurrencias.csv")
write.csv(concurrencias, "Concurrencias_Pinamar/Concurrencias.csv", row.names = FALSE)
archivos <- list.files("CSVs Concurrencias/restaurantes pinamar")
concurrencias <- data.frame()
for(i in archivos){
concurrencia <- read.csv(paste("CSVs Concurrencias/restaurantes pinamar/", i, sep = ""))
concurrencias <- rbind(concurrencias, concurrencia)
}
write.csv(concurrencias, "Concurrencias_Pinamar/Concurrencias.csv", row.names = FALSE, encoding = "UTF-8")
write.csv(concurrencias, "Concurrencias_Pinamar/Concurrencias.csv", row.names = FALSE, fileEncoding = "UTF-8")
write.csv(concurrencias, "Concurrencias_Pinamar/Concurrencias.csv", row.names = FALSE, fileEncoding = "UTF-8")
library(RSelenium)
driver <- try(rsDriver(browser = "firefox", geckover = "latest"), silent = T)
driver <- try(rsDriver(browser = "firefox", geckover = "latest"), silent = T)
remDr <<- driver[["client"]]
driver <- try(rsDriver(browser = "firefox", geckover = "latest"), silent = T)
driver <- rsDriver(browser = "firefox", geckover = "latest")
gc()
driver <- rsDriver(browser = "firefox", geckover = "latest")
remDrAll <- rsDriver(browser = "firefox")
remDr <- remDrAll$client
library(RSelenium)
remDrAll <- rsDriver(browser = "firefox")
remDr <- remDrAll$client
remDr$close()
rm(remDrAll )
gc()
remDrAll <- rsDriver(browser = "firefox")
rm(list = ls())
library(RSelenium)
remDrAll <- rsDriver(browser = "firefox")
remDr <- remDrAll$client
remDr$close()
rm(remDrAll )
gc()
remDrAll <- rsDriver(browser = "firefox")
remDr$closeServer()
remDr$closeServer
remDr$closeServer()
remDrAll <- rsDriver(browser = "firefox")
remDr$closeServer
remDr$closeServer()
60*5
install.packages("git2r")
gitcommit <- function(msg = "commit from Rstudio", dir = getwd()){
cmd = sprintf("git commit -m\"%s\"",msg)
system(cmd)
}
#Descarga concurrencias parques CABA:
library(git2r)
gitadd()
git2r::config(user.name = "matiaspoullain", user.email = "matias.poullain")
gitadd()
gitstatus()
install.packages("drat")
library(drat)
gitstatus()
#Descarga concurrencias parques CABA:
library(git2r)
gitstatus()
git2r::gitstatus()
git2r::status()
git2r::add(repo = ".", path = NULL, force = FALSE)
git2r::add(repo = ".", path = ".", force = FALSE)
getwd()
git2r::add(repo = ".", path = getwd(), force = FALSE)
git2r::commit(repo = ".", message = "prueba")
git2r::push()
git2r::push(credentials = "git@github.com:matiaspoullain/Concurrencia.git")
git2r::push(credentials = "albertoelloco1")
shell("git push")
git("git commit prueba 2")
shell("git commit prueba 2")
shell("git commit prueba2")
git2r::config(user.name = "matiaspoullain", user.email = "matias.poullain")
git2r::status()
git2r::add(repo = ".", path = getwd(), force = FALSE)
git2r::commit(repo = ".", message = "subida de datos de parques")
git2r::commit(repo = ".", message = "subida de datos de parques")
git2r::commit(repo = ".", message = "prueba", all = TRUE)
shell("git push")
git2r::add(repo = ".", path = getwd(), force = FALSE)
git2r::commit(repo = ".", message = "prueba2", all = TRUE)
shell("git push")
bares <- read.csv("Nombres bares CABA.csv", encoding = "UTF-8")
bares <- read.csv("Concurrencias_CABA/Nombres bares CABA.csv", encoding = "UTF-8")
bares
bares <- read.csv("Concurrencias_CABA/Nombres bares CABA.csv")
bares
bares <- paste(bares$caba, ", Ciudad de Buenos Aires", sep = "")
bares
salieron.mal <- bares[25:50]
df.salieron.mal <- data.frame(num, salieron.mal)
num <- 1:length(salieron.mal)
df.salieron.mal <- data.frame(num, salieron.mal)
write.csv(df.salieron.mal, "bares salieron mal.csv")
#Descarga concurrencias parques CABA:
library(git2r)
git2r::config(user.name = "matiaspoullain", user.email = "matias.poullain")
git2r::status()
git2r::add(repo = ".", path = getwd(), force = FALSE)
git2r::commit(repo = ".", message = "cambios chicos", all = TRUE)
shell("git push")
git2r::config(user.name = "matiaspoullain", user.email = "matias.poullain")
git2r::status()
git2r::add(repo = ".", path = getwd(), force = FALSE)
git2r::commit(repo = ".", message = "cambios chicos", all = TRUE)
shell("git push")
source('C:/Users/Rzne_2/Desktop/Proyectos/Concurrencia github/Concurrencia/Concurrencias_CABA/Descarga concurrencias parques.R', echo=TRUE)
source('C:/Users/Rzne_2/Desktop/Proyectos/Concurrencia github/Concurrencia/Concurrencias_CABA/Descarga concurrencias parques.R', echo=TRUE)
#Sources
#Parques
source("Descarga concurrencias parques.R")
#Sources
#Parques
source("Concurrencias_CABA/Descarga concurrencias parques.R")
salieron.mal <- read.csv("Concurrencias CABA/parques salieron mal.csv")
salieron.mal <- read.csv("Concurrencias_CABA/parques salieron mal.csv")
salieron.mal
salieron.mal <- salieron.mal$salieron.mal
salieron.mal
#Descarga concurrencias parques CABA:
library(git2r)
library(sgat)
initialization_sgat()
parques <- salieron.mal
va.por <- parques[1]
salieron.mal <- c()
repeticiones <- 0
for(resta in parques[which(parques == va.por):length(parques)]){
print(paste("Va por ", which(parques == va.por), " de ", length(parques), ": ", 100* which(parques == va.por)/length(parques), " %", sep = "" ))
concurrencia.parques.caba <- 1
class(concurrencia.parques.caba) <- "try-error"
intento <- 1
while(class(concurrencia.parques.caba) == "try-error" & intento <= 20){
concurrencia.parques.caba <- try(sgat(resta, carpeta.guardado = "CSVs Concurrencias/Parques CABA", tiempo.espera = 15), silent = TRUE)
intento <- intento + 1
repeticiones <- repeticiones + 1
}
if(class(concurrencia.parques.caba) == "try-error"){
salieron.mal <- c(salieron.mal, resta)
}
if(repeticiones >= 100){
Sys.sleep(300)
repeticiones <- 0
}
va.por <- resta
}
num <- 1:length(salieron.mal)
df.salieron.mal <- data.frame(num, salieron.mal)
write.csv(df.salieron.mal, "Concurrencias_CABA/parques salieron mal.csv")
git2r::config(user.name = "matiaspoullain", user.email = "matias.poullain")
git2r::status()
git2r::add(repo = ".", path = getwd(), force = FALSE)
git2r::commit(repo = ".", message = "cambios chicos", all = TRUE)
shell("git push")
salieron.mal
parques <- salieron.mal
va.por <- parques[1]
salieron.mal <- c()
repeticiones <- 0
for(resta in parques[which(parques == va.por):length(parques)]){
print(paste("Va por ", which(parques == va.por), " de ", length(parques), ": ", 100* which(parques == va.por)/length(parques), " %", sep = "" ))
concurrencia.parques.caba <- 1
class(concurrencia.parques.caba) <- "try-error"
intento <- 1
while(class(concurrencia.parques.caba) == "try-error" & intento <= 20){
concurrencia.parques.caba <- try(sgat(resta, carpeta.guardado = "CSVs Concurrencias/Parques CABA", tiempo.espera = 15), silent = TRUE)
intento <- intento + 1
repeticiones <- repeticiones + 1
}
if(class(concurrencia.parques.caba) == "try-error"){
salieron.mal <- c(salieron.mal, resta)
}
if(repeticiones >= 100){
Sys.sleep(300)
repeticiones <- 0
}
va.por <- resta
}
num <- 1:length(salieron.mal)
df.salieron.mal <- data.frame(num, salieron.mal)
write.csv(df.salieron.mal, "Concurrencias_CABA/parques salieron mal.csv")
git2r::config(user.name = "matiaspoullain", user.email = "matias.poullain")
git2r::status()
git2r::add(repo = ".", path = getwd(), force = FALSE)
git2r::commit(repo = ".", message = "datos parques", all = TRUE)
shell("git push")
salieron.mal
parques <- salieron.mal
va.por <- parques[1]
salieron.mal <- c()
repeticiones <- 0
for(resta in parques[which(parques == va.por):length(parques)]){
print(paste("Va por ", which(parques == va.por), " de ", length(parques), ": ", 100* which(parques == va.por)/length(parques), " %", sep = "" ))
concurrencia.parques.caba <- 1
class(concurrencia.parques.caba) <- "try-error"
intento <- 1
while(class(concurrencia.parques.caba) == "try-error" & intento <= 50){
concurrencia.parques.caba <- try(sgat(resta, carpeta.guardado = "CSVs Concurrencias/Parques CABA", tiempo.espera = 15), silent = TRUE)
intento <- intento + 1
repeticiones <- repeticiones + 1
}
if(class(concurrencia.parques.caba) == "try-error"){
salieron.mal <- c(salieron.mal, resta)
}
if(repeticiones >= 100){
Sys.sleep(300)
repeticiones <- 0
}
va.por <- resta
}
num <- 1:length(salieron.mal)
df.salieron.mal <- data.frame(num, salieron.mal)
write.csv(df.salieron.mal, "Concurrencias_CABA/parques salieron mal.csv")
git2r::config(user.name = "matiaspoullain", user.email = "matias.poullain")
git2r::status()
git2r::add(repo = ".", path = getwd(), force = FALSE)
git2r::commit(repo = ".", message = "datos parques", all = TRUE)
shell("git push")
salieron.mal
parques <- salieron.mal
va.por <- parques[1]
salieron.mal <- c()
repeticiones <- 0
for(resta in parques[which(parques == va.por):length(parques)]){
print(paste("Va por ", which(parques == va.por), " de ", length(parques), ": ", 100* which(parques == va.por)/length(parques), " %", sep = "" ))
concurrencia.parques.caba <- 1
class(concurrencia.parques.caba) <- "try-error"
intento <- 1
while(class(concurrencia.parques.caba) == "try-error" & intento <= 50){
concurrencia.parques.caba <- try(sgat(resta, carpeta.guardado = "CSVs Concurrencias/Parques CABA", tiempo.espera = 15), silent = TRUE)
intento <- intento + 1
repeticiones <- repeticiones + 1
}
if(class(concurrencia.parques.caba) == "try-error"){
salieron.mal <- c(salieron.mal, resta)
}
if(repeticiones >= 100){
Sys.sleep(300)
repeticiones <- 0
}
va.por <- resta
}
num <- 1:length(salieron.mal)
df.salieron.mal <- data.frame(num, salieron.mal)
write.csv(df.salieron.mal, "Concurrencias_CABA/parques salieron mal.csv")
git2r::config(user.name = "matiaspoullain", user.email = "matias.poullain")
git2r::status()
git2r::add(repo = ".", path = getwd(), force = FALSE)
git2r::commit(repo = ".", message = "datos parques", all = TRUE)
shell("git push")
salieron.mal
